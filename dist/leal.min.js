// Dialogs
$(function() {
	$('body').append($('<div>', { 'class': 'dialog-overlay', 'hidden': true }));
	$.dialog = new function() {
		this.height = $(window).height();
		this.width = $(window).width();

		// Waiting
		this.waiting = function(m) {
			html = '<div class="dialog z-depth-1 dialog-waiting" hidden>' +
				'<div class="dialog-body text-center">' + m + '</div>' +
				'</div>';
			this.open(html);
		};

		// Confirm
		// Run a function
		this.confirm = function(title, message, confirm, cancel) {
			var data = { confirm: {}, cancel: {} };
			data.title = title;
			data.message = message;
			data.confirm.event = confirm || "";
			data.cancel.event = cancel || "";
			data.cancel.label = "CANCELAR";
			data.confirm.label = "OK";
			if (typeof title == "object") {
				data = $.extend(true, data, title);
			}
			html = '<div class="dialog z-depth-1" hidden>' +
				'<div class="dialog-header">' + data.title + '</div>' +
				'<div class="dialog-body">' + data.message + '</div>' +
				'<div class="dialog-footer">' +
				'<button class="btn-flat dialog-cancel waves-effect">' + data.cancel.label + '</button>' +
				'<button class="btn-flat dialog-ok waves-effect">' + data.confirm.label + '</button>' +
				'</div>' +
				'</div>';
			this.open(html);

			$(".dialog-cancel").on("click", function() {
				if (typeof data.cancel.event == 'function') data.cancel.event();
				$.dialog.close();
			});

			$(".dialog-ok").on("click", function() {
				if (typeof data.confirm.event == 'function') data.confirm.event();
				$.dialog.close();
			});
			$(".dialog-ok").focus()
		};

		this.prompt = function(obj) {
		      var dial = {
		        'title': "",
		        'message': "",
		        'label': "",
		        'inputName': "input-dialog",
		        'regex': "",
		        'callbackMessage': "Campo obrigatório",
		        'success': function() {}
		      }

		      $.extend(dial, obj);
		      html = '<div class="dialog z-depth-1" hidden>\
										<div class="dialog-header">' + dial.title + '</div>\
										<div class="dialog-body">' + dial.message + '\
											<br>\
											<div class="form-group">\
												<label class="control-label">' + dial.label + '</label>\
												<input	class="' + dial.inputName + '" name="' + dial.inputName + '" type="text" regex="'+ dial.regex +'"></form-group>\
												<div class="callback">'+ dial.callbackMessage +'</div>\
											</div>\
										</div>\
										<div class="dialog-footer">\
											<button class="btn-flat dialog-cancel waves-effect">CANCELAR</button>\
											<button class="btn-flat dialog-ok waves-effect">OK</button>\
										</div>\
									</div>';
		      this.open(html);

		      $(".dialog").find("[name='"+ dial.inputName +"']").focus();

		      $(".dialog-cancel").on("click", function() {
		        $.dialog.close();
		      });

		      $(".dialog-ok").on("click", function() {
		        if (typeof func == "function") dial.success();
		        $.dialog.close();
		      });

		    };

		// Info
		this.info = function(title, m) {
			html = '<div class="dialog z-depth-1">' +
				'<div class="dialog-header">' + title + '</div>' +
				'<div class="dialog-body">' + m + '</div>' +
				'<div class="dialog-footer">' +
				'<button class="btn-flat btn-block dialog-cancel waves-effect">FECHAR</button>' +
				'</div>' +
				'</div>';
			this.open(html);
			$(".dialog-cancel").on("tapstart, click", function() {
				$.dialog.close();
			});
			$(".dialog-cancel").focus();
		};

		// Add dialog at the end of Body
		this.open = function(html) {
			$("body").append("<div class='dialog-overlay'></div>");
			$("body").append(html);
			// console.log([winH, winW]);

			if ($(window).width() <= 480) {
				$(".dialog").width($(window).width() - 40);
			}
			// console.log([$(".dialog").height(), $(".dialog").width()]);

			var boxH = $(".dialog").height();
			var boxW = $(".dialog").width();

			$(".dialog").css({
				top: $(window).height() / 2 - boxH / 2,
				left: $(window).width() / 2 - boxW / 2
			}).show(0);

			$(document).keyup(function(e) {
				if (e.keyCode == 27 && $(".dialog").length && !$(".dialog-waiting").length)
					$.dialog.close();
			});
		};

		this.close = function() {
			$(".dialog-overlay").remove();
			$(".dialog").remove();
		};
	};

});

/**
 * jQuery.fn.sortElements
 * --------------
 * @author James Padolsey (http://james.padolsey.com)
 * @version 0.11
 * @updated 18-MAR-2010
 * --------------
 * @param Function comparator:
 *  Exactly the same behaviour as [1,2,3].sort(comparator)
 *  
 * @param Function getSortable
 *  A function that should return the element that is
 *  to be sorted. The comparator will run on the
 *  current collection, but you may want the actual
 *  resulting sort to occur on a parent or another
 *  associated element.
 *  
 *  E.g. $('td').sortElements(comparator, function(){
 *   return this.parentNode; 
 *  })
 *  
 *  The <td>'s parent (<tr>) will be sorted instead
 *  of the <td> itself.
 */
jQuery.fn.sortElements = (function() {

  var sort = [].sort;

  return function(comparator, getSortable) {

    getSortable = getSortable || function() {
      return this;
    };

    var placements = this.map(function() {

      var sortElement = getSortable.call(this),
        parentNode = sortElement.parentNode,

        // Since the element itself will change position, we have
        // to have some way of storing it's original position in  
        // the DOM. The easiest way is to have a 'flag' node:
        nextSibling = parentNode.insertBefore(
          document.createTextNode(''),
          sortElement.nextSibling
        );

      return function() {

        if (parentNode === this) {
          throw new Error(
            "You can't sort elements if any one is a descendant of another."
          );
        }

        // Insert before flag:
        parentNode.insertBefore(this, nextSibling);
        // Remove flag:
        parentNode.removeChild(nextSibling);

      };

    });

    return sort.call(this, comparator).each(function(i) {
      placements[i].call(getSortable.call(this));
    });

  };

})();

/**
 * Declare the object so that no errors occur
 */

function back_button() {
  if ($(".dialog").length) {
    if (!$(".dialog-waiting").length)
      $.dialog.close();
    return false;
  }

  if ($(".gdatepicker").length) {
    $.gdatepicker.close();
    return false;
  }

  if (typeof $.ctrl[current_page].back != "undefined") {
    $.ctrl[current_page].back();
    return false;
  }

  if (location.hash.length) {
    redirect('');
    return false;
  }

  $.dialog.confirm("", "Deseja fechar o aplicativo?", function() {
    navigator.app.exitApp();
  });
}

function clone(x) {
  return JSON.parse(JSON.stringify(x));
}

$.fn.broken = function(img) {
  $(this).error(function() {
    var img = $(this).attr('broken');
    if ($(this).attr('src') != img) $(this).attr('src', img);
  }).attr('broken', img);
}

Number.prototype.format = function(c, d, t) {
  var n = this,
    c = isNaN(c = Math.abs(c)) ? 2 : c,
    d = d == undefined ? "." : d,
    t = t == undefined ? "," : t,
    s = n < 0 ? "-" : "",
    i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "",
    j = (j = i.length) > 3 ? j % 3 : 0;
  return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
};

$(function() {
  toggle_mask();
  $('html').on('click', '.back-history', function() { history.back(); });
  if ($('[data-toggle="tooltip"]').tooltip) {
    setInterval(function() {
      $('[data-toggle="tooltip"]').not('.tooltip-setted').addClass('tooltip-setted').tooltip();
    }, 5000);
  }
});

function toggle_mask() {
  if ($("input").mask) {
    $('.mask-date').unmask().mask('00/00/0000', {});
    $('.mask-time').unmask().mask('00:00:00', { placeholder: "__:__:__" });
    $('.mask-date-time').unmask().mask('00/00/0000 00:00:00', { placeholder: "__/__/____ __:__:__" });
    $('.mask-cep').unmask().mask('00000-000', { placeholder: "_____-___" });
    // $('.mask-phone').mask('(00) 0000-0000');
    $('.mask-cpf').unmask().mask('000.000.000-00', { placeholder: "___.___.___-__" });
    $('.mask-cns').unmask().mask('000 0000 0000 0000', { placeholder: "___ ____ ____ ____" });
    $('.mask-cnpj').unmask().mask('00.000.000/0000-00', { placeholder: "__.___.___/____-__" });
    $('.mask-money').unmask().mask('000.000.000.000.000,00', { reverse: true });
    $('.mask-thousand').unmask().mask('000 000 000 000 000', { reverse: true });
    $('.mask-number').unmask().mask('#', { reverse: true });

    $('.mask-phone').unmask().mask(function(val) {
      return val.replace(/\D/g, '').length === 11 ? '(00) 00000-0000' : '(00) 0000-00009';
    }, {
      onKeyPress: function(val, e, field, options) {
        // field.mask(maskBehavior.apply({}, arguments), options);
      },
      placeholder: "(__) ____-____"
    });
  }
}

function update_masks() {
  $(".mask-cpf, .mask-phone, .mask-date, .mask-time, .mask-date, .mask-cpf, .mask-money, .mask-number").trigger('keyup');
}

function error_send() {
  $.dialog.info("Erro", "Erro ao enviar informações");
}

function error_load() {
  $.dialog.info("Erro", "Erro ao carregar informações");
}

function img_error(img_class, img) {
  var img_class = typeof img_class == 'undefined' ? ".img-avatar" : img_class;
  var img = typeof img == 'undefined' ? '/images/user-default.png' : img;
  $(img_class).unbind("error").on("error", { img: img }, function(e) {
    // var img = '/images/user-default.png';
    if ($(this).attr('src') != e.data.img) $(this).attr('src', e.data.img);
  });
}

$(".img-avatar", "#birthdays").error(function() {
  var img = '/images/user-default.png';
  if ($(this).attr('src') != img) $(this).attr('src', img);
});

Function.prototype.bind = function(scope) {
  var _function = this;

  return function() {
    return _function.apply(scope, arguments);
  }
}

$.fn.toClean = function() {
  $('.to-clean', this).html('');
}

$.fn.toDefault = function() {
  $('.to-clean', this).each(function(i) {
    var tmp = $(this).attr('default');
    if (!tmp) tmp = '';
    if (!$(this).html().length) $(this).html(tmp);
  });
}

function removeAccents(str) {
  var accents = 'ÀÁÂÃÄÅàáâãäåÒÓÔÕÕÖØòóôõöøÈÉÊËèéêëðÇçÐÌÍÎÏìíîïÙÚÛÜùúûüÑñŠšŸÿýŽž';
  var accentsOut = "AAAAAAaaaaaaOOOOOOOooooooEEEEeeeeeCcDIIIIiiiiUUUUuuuuNnSsYyyZz";
  str = str.split('');
  var strLen = str.length;
  var i, x;
  for (i = 0; i < strLen; i++) {
    if ((x = accents.indexOf(str[i])) != -1) {
      str[i] = accentsOut[x];
    }
  }
  return str.join('');
}

var localdb = {

  db: "localdb",

  init: function(name) {
    this.db = name;
    if (!this.has())
      this.clear();
  },

  has: function() {
    return (localStorage.getItem(this.db) != null);
  },

  save: function(data) {
    localStorage.setItem(this.db, JSON.stringify(data));
    return true;
  },

  get: function(info) {
    if (this.has()) {
      var obj = JSON.parse(localStorage.getItem(this.db));
      for (key in obj)
        if (key == info)
          return obj[key];
    } else {
      return false;
    }
  },

  set: function(info, data) {
    var aux = {};
    if (this.has())
      aux = JSON.parse(localStorage.getItem(this.db));
    aux[info] = data;
    localStorage.setItem(this.db, JSON.stringify(aux));
  },

  clear: function() {
    localStorage.removeItem(this.db);
  },

  getObject: function() {
    return JSON.parse(localStorage.getItem(this.db));
  }

};

/**
 * Declare the object so that no errors occur
 */

$.ctrl = {};
var current_page = "";

$.view = function(name, done) {
  name = name.replace("#", "").replace(".", "/");
  $.ajax({
    url: "views/" + name + ".html",
    type: "GET",
    dataType: "html",
    success: function(data) {
      $(".app").append(data);
    },
    error: function() {
      $.alert("[$.view] caminho inválido");
    }
  }).done(done);
};

$.controller = function(name) {
  name = name.replace("#", "").replace(".", "/");
  $.ajax({
    url: "js/controllers/" + name + ".js",
    type: "GET",
    dataType: "script",
    error: function() {
      console.error("[$.controller] caminho inválido");
      // location.hash = "error";
    }
  });
};

function routes(e) { //console.log('routes');
  hash = argument(0);
  if (!hash) {
    redirect(initial_hash);
    return false;
  }

  $(".all-views").hide();
  $(".active", ".sidebar-menu-items").removeClass("active");

  if (typeof $.ctrl[hash] == 'undefined') $.controller(hash);
  else $.ctrl[hash].show();
  current_page = hash;
}

function redirect(route) {
  var hash = location.hash.replace('#', '');
  if (typeof route == 'object') route = route.join('/');
  route = route.replace('#', '');
  if (route == hash)
    routes();
  else
    location.hash = route;
}

function controller(id, obj) {
  if (typeof obj == 'function') {
    var c = new obj();

    for (var i in c) {
      if (typeof c[i] == 'function') {
        c[i] = c[i].bind(c);
      }
    }
    if (!c.view) c.view = '#' + id;

    $.ctrl[id] = c;
  } else
    $.ctrl[id] = obj;

  if (typeof $.ctrl[id].initialize == 'function')
    $($.ctrl[id].initialize);
}

var initial_hash = '';

function initial(hash) {
  initial_hash = hash;
}

function argument(i) {
  var hash = location.hash.replace('#', '').split('/');
  if (hash.length > 1 && !hash[0].length) i++;
  return (typeof hash[i] == 'undefined' ? null : hash[i]);
}

$(function() {
  $(window).on('hashchange', routes);
  setTimeout(routes, 200);
});

/**
 * Declare the object so that no errors occur
 */

$.support.cors = true;
var serverUrl = "/";

$.each(["put", "delete", "post", "get"], function(i, method) {
  $[method] = function(url, data, callback, fail) {
    var type_user = $('meta[name=type_user]').length ? $('meta[name=type_user]').attr('value') : '';

    var url_complete = serverUrl + '/' + type_user + '/' + url;
    while (url_complete.indexOf("//") >= 0) url_complete = url_complete.replace(/\/\//gi, "/");

    return $.ajax({
      url: url_complete,
      type: method,
      dataType: "json",
      crossDomain: true,
      data: data,
      success: callback,
      error: fail
    });
  };
});

$.fn.send = function(success, error) {
  if (typeof erro == 'undefined') error = error_send;
  $(this).submit(function(e) {
    e.preventDefault();
    if (!$(this).validation()) {
      $.alert('Campo inválido. Por favor preencha corretamente.');
      return false;
    }
    // $.dialog.waiting("Aguarde...");
    $.post($(this).attr("action"), $(this).serialize(), success, error).done(function() {
      // if($(".dialog-waiting").length) $.dialog.close();
    });
  });
};

$.fn.sendImage = function(success, error) {
  $(this).submit(function() {
    $.dialog.waiting("Enviando...");
    $.ajax({
      type: "POST",
      url: serverUrl + $(this).attr("action"),
      data: new FormData(this),
      enctype: 'multipart/form-data',
      processData: false, // tell jQuery not to process the data
      contentType: false // tell jQuery not to set contentType
    }).success(success).fail(error).done(function() {
      if ($(".dialog-waiting").length) $.dialog.close();
    });
    return false;
  });
  $(this).find('input[type="file"]').change(function() {
    var str = $(this).val(),
      arr = [/.png$/, /.jpg$/, /.jpge$/];
    for (var i = 0; i < arr.length; i++)
      if (str.search(arr[i]) > 0) {
        $(this).closest('form').submit();
        return;
      }
    $.alert("Arquivo inválido!");
  });
};

$.fn.serializeObject = function() {
  var o = {};
  var a = this.serializeArray();
  $.each(a, function() {
    if (o[this.name]) {
      if (!o[this.name].push) {
        o[this.name] = [o[this.name]];
      }
      o[this.name].push(this.value || '');
    } else {
      o[this.name] = this.value || '';
    }
  });
  return o;
};

$.fn.validation = function() {
  var inputs = $(this).find("input, select");
  $(this).find(".has-error").removeClass("has-error");
  $(inputs).removeClass('invalid');
  $(".callback").hide();
  for (var i = 0; i < $(inputs).length; i++) {
    var regex = $(inputs).eq(i).attr('regex');
    if (regex && regex.length && $(inputs).eq(i).is(":enabled")) {
      var val = $(inputs).eq(i).is(":radio") || $(inputs).eq(i).is(":checkbox") ?
        $(this).find("input:" + $(inputs).eq(i).attr("type")).filter("[name='" + $(inputs).eq(i).attr("name") + "']").filter(":checked").val() :
        $(inputs).eq(i).val();
      val = val ? val : "";
      // console.log($(inputs).eq(i).attr("name"), val, regex);
      if (!(new RegExp(regex, "i")).exec(val)) {
        $(inputs).eq(i).closest(".form-group").addClass("has-error").find(".callback").show();
        $(inputs).eq(i).addClass('invalid').focus();
        return false;
      } else {}
    }
  }
  return true;
};

function clone(x) {
  return JSON.parse(JSON.stringify(x));
}

// Toast
$(function() {
  $.alert = function(m, t) {
    t = t || 5000;
    id = "toast-" + Date.now();

    $("#toast-container").show(0);

    html = '<div id="' + id + '" class="toast-alert toast">\
              <div class="toast-message">' + (m || '') + '</div>\
              <div class="material-icons toast-close" hidden>&#xE5CD;</div>\
            </div>';

    $("#toast-container").append(html);
    id = '#' + id;

    $(id).addClass("toast-show");
    $(".toast-close", id).click(function() {
      var toast = $(this).closest(".toast");
      $(toast).removeClass("toast-show");
      setTimeout(function(toast) {
        $(toast).remove();
      }, 300, toast);
    });

    if (t > 0) {
      setTimeout(function(id) {
        $(".toast-close", id).click();
      }, t, id);
    }

    return id;
  }
  $('body').append($('<div>', { 'id': 'toast-container' }));
});

//# sourceMappingURL=leal.min.js.map
